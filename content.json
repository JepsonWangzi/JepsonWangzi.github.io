{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2018-04-22T14:35:32.000Z","updated":"2018-04-22T14:46:20.980Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"To Be cotining………"},{"title":"categories","date":"2018-04-22T14:16:23.000Z","updated":"2018-04-22T14:24:14.295Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"MVC ：是一种软件架构模式，也有人叫设计模式，按照MVC规则将代码进行拆分之后，有利与代码的解耦，维护。 M:model 和数据相关的所有代码都是M层的代码V：View 和展示相关的所有的代码都是V层的代码C:Controler M层和V层进行数据交换的桥梁MVP:P presenterMVVM:VM view-model 双向数据绑定 如果 v-model用在复选框上，绑定数据上有两种值1：布尔值：可以控制复选框的选中状态2：数组：当选中复选框的时候，复选框的value值会存入数组中 用在下拉框的时候，绑定的是value值 总结：表单用在数据提交的时候（双向绑定），获取表单得分值一定是通过绑定数据实现的。 插值表达式{ }；可以只能放js的任何表达式 要有结果才行 object.defineProperty:方法添加属性var obj={‘name’:};object.defineProperty(obj,’name’,{ 属性的设置访问器：不能和write set:function{ （ ） };。会在属性被赋值的时候自动调用get:function{ （ ） }:会在属性被获取值的时候自动调用})双向绑定原理：元素变化，数据变化，数据变化，元素也变化ie8一下为什么不支持双向绑定？因为ie8一下没有object.defineProperty这个方法，vue的原理就是这个Vue.set动态添加的数据是可以实现绑定的；Vue.get(vm) Object.defineProperty(obj, “name”, {set: function(value){this._name = value;// 这个方法一被调用，就证明属性发生变化了// 属性一变， html元素就要变// 在这里写代码更新html元素就可以达到双向绑定的效果了document.querySelector(“#txt”).value = this._name;},get: function(){return this._name;}}) v-bind 指令当需要给HTML标签中的属性绑定数据的时候，我吗不能用插值语句，需要用bind 《img v-bind:src=” “》 语法：v-bind：属性名=“要绑定的数据”简写 ： ：属性名=“要绑定的数据” v-bind还可以绑定对象，在对象中属性值是给对象添加的类名，值是Boolean值 代表是否使用v-bind还可以绑定数组，在数组中可以写入类名，绑定是数组里得分数据都生效，也可以和对象联合使用，改变Boolean值 也可以把定义好的对象和数组直接写到bind里面，直接修改Boolean值 v-bind绑定行内样式：1：可以直接写入绑定的数据名字2：可以绑定对象 传入多个属性 vue中的注册事件：v-on:事件名称=”函数名“ 简写 @事件名称=”函数名“函数名：在vue里创建 methods 里面写函数名及方法如何从methods中拿到data中的数据: 通过原型中找就🆗了 vm.属性 假如拿到的是数字，需要转换为number类型的数据1:当注册事件的时候，绑定的内容可以是函数名，也可以是函数名加上小括号，类似于调用，但是不是调用，可以用来传参如果是函数名加小括号，那么在事件触发的时候，可以传参当还需要事件对象的 时候，参数后面继续传参，vue规定好的是$event;2:只是函数名的时候，不能传参，但是在vue定义的函数中获取到事件对象 e;vue中dom更新是异步的，数据改变时候并不代表页面中的内容就更新了，vue是延迟之后执行的，为了防止页面的重绘，vue会等到一个程序，改了很多东西时，在执行，这样会减少页面的重绘和性能，所有dom更新会有延迟vue提供了一个方法，确保dom跟新完成执行的方法this.$nextTick 异步更新队列 this.$nextTick(function(){这个里面执行dom更新执行的操作，因为vue是异步的}) 事件修饰符：可以给事件加上一些特定的功能：用法 v-on：事件名称.事件修饰符=”事件函数“stop：如果给事件加上了stop会阻止冒泡；prevent: 阻止事件的默认行为，例如a连接的默认行为跳转once：事件只触发一次self：事件只能自己触发capture:事件会在捕获阶段被触发如果即向不冒泡和跳转 点下去就行v-on:click.stop.precent=”事件函数” vue中的列表渲染：v-for=”item in ‘数组名’“ item用插值表达式表示 因为是遍历，所以插值表达式还可以写index；直接可以写键值对，循环的次数； .png)遍历指定的数字， 1到100； 遍历数组：.png) v-for 通常需要配合key的使用：当想往数组里添加某一项的时候，效率低下，会替换掉原本插入数组的值，并且下面的都会改变所以有了key 绑定死，增加效率。 key需要一个唯一值，一般情况下，我们都给他绑定index； 总结：1：用v-model在复选框上得到时候，可以用空数组表示，当在浏览器选中的时候，数组的长度就会发生变化2：用v-moel绑定下拉框的时候，绑定selec标签，绑定的是默认数字0，表示默认选中的是第一个元素绑定属性的时候，v-bind：属性=”数据“ 这是简写 这是完整的写发获取某张图片；3：给盒子设置类的属性的时候，可以是一个数组，可以是一个对象，对象的话是键值对形式存在的，值是Boolean值，表示用不用。也可以是一个数组里得分值，只设置一个 4：vue更新数据是异步的，在改变原来的数据时候页面发生了变化，但是没有改，这个时候需要一个方法监听改完了的事件this.$nextTick写在点击事件或者其他事件的后面里面； 5：v-on事件可以简写@时间名=”事件函数名“ 不代括号的 可以在methods的事件中拿到事件event假如带括号的话，在methods里面拿不到，但是可以在v-on的函数名里面传参数，$event 然后在methods的事件里接收一下就🆗；"}],"posts":[{"title":"vue笔记第二部分","slug":"vue笔记第一部分","date":"2018-05-08T10:57:17.000Z","updated":"2018-05-08T11:18:57.998Z","comments":true,"path":"2018/05/08/vue笔记第一部分/","link":"","permalink":"http://yoursite.com/2018/05/08/vue笔记第一部分/","excerpt":"","text":"渐进式：只包括一些核心的功能，不像重量级angular功能啥都有，需要其他功能的时候，在用插件引入其他功能 #####指令：自定义的HTML标签属性 作用：标记功能，当vue解析HTML代码的时候，遇到vue指令，就会实现特定的功能。 v-show：控制元素的显示隐藏 通过控制元素的display属性控制; 用在切换显示比较频繁的位置 #####v-if： 可以控制元素的展示和隐藏，通过删除和创建元素控制； v-if:用在只要在进入页面之后进行一次判断的场景（管理员模块的显示和隐藏） v-pre ：主要用来跳过没有vue指令的HTML代码，加快效率 v-once用来做性能优化，这个指令所在的元素中所有的vue v-text：插值表达式中如果有HTML标签会被转移之后输出到页面上。不会被解析，可以对照inner text理解 v-html：可以渲染HTML，对照inner HTML理解 vue指定加载存在的问题：在vue被加载之前，所有指令都会被浏览器正常按照HTML渲 染出来，让vue加载完成时，指令才会被解析，然后重新渲染页面，会有闪烁效果。网速查的时候，用户体验不好。 ​ v-clock：解决删除的问题，还有渲染的插值符号在界面上 方法： 使用属性选择器 [ v-clock ] { display: none } ; 原理： 在vue加载之前，属性选择器生效，元素none，vue加载完成的时候，指令被溢出，指令失效，元素也就正常按照指令显示了。 箭头函数： 一：写法 var 函数名=（参数1，参数2）=&gt;{函数体} 二：函数的简写： 1：假如参数只有一个，小括号可以省略，假如没有参数的话 可以用下划线表示 2：假如函数体里就一句话，大括号可以不写； 3：假如函数体里只有一句话，并且这句话还是return语句，那么大括号可以省略； 三：箭头函数的this指向 1：箭头没有自己的this 2：如果在箭头函数中访问this，那么使用的this就是外层作用域中的this 3：箭头函数中this指向不能再使用函数调用模式来分析了！ ​ var age = 20; var obj = { age: 18, func: () =&gt; { //this --&gt; window //这是一个箭头函数，所this要向外找 外层作用域就是全局作用域 //全局作用域中的this是window var f = () =&gt; { //this --&gt; window //这是一个箭头函数，所this要向外找 console.log(this.age); } f(); } } obj.func(); 五：箭头函数没有自己的arguments; 在箭头里如果调用了argums，那么会沿着作用域向上找 六 箭头函数传递不定个数的参数 rest参数：剩余的参数 1234 var sum=(c,b,...a)=&gt;&#123; console.log(a);&#125;sum(2,1,3,4,5,6,7) 打印a结果是[ 3 , 4 ,5 ,6 , 7 ] a就代表rest参数 条件： 1：一个函数只能有一个rest参数 2：rest只能作为参数列表的最后一个参数 ES6 对象；简写： ：function可以省略； 扩展：需要别人对象的方法，在对象里添加（...对象名）","categories":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/categories/Vue/"}],"tags":[]},{"title":"vue first Day","slug":"vue-first-Day","date":"2018-04-22T14:53:55.000Z","updated":"2018-04-22T15:04:21.887Z","comments":true,"path":"2018/04/22/vue-first-Day/","link":"","permalink":"http://yoursite.com/2018/04/22/vue-first-Day/","excerpt":"","text":"MVC ：是一种软件架构模式，也有人叫设计模式，按照MVC规则将代码进行拆分之后，有利与代码的解耦，维护。 M:model 和数据相关的所有代码都是M层的代码 V：View 和展示相关的所有的代码都是V层的代码 C:Controler M层和V层进行数据交换的桥梁 MVP:P presenter MVVM:VM view-model 双向数据绑定 双向数据绑定 如果 v-model用在复选框上，绑定数据上有两种值 1：布尔值：可以控制复选框的选中状态 2：数组：当选中复选框的时候，复选框的value值会存入数组中 3 用在下拉框的时候，绑定的是value值 总结：表单用在数据提交的时候（双向绑定），获取表单得分值一定是通过绑定数据实现的。 插值表达式{ }； 可以只能放js的任何表达式 要有结果才行 双向绑定的而原理 object.defineProperty:方法添加属性 123456789var obj=&#123;‘name’:&#125;;object.defineProperty(obj,&apos;name&apos;,&#123; 属性的设置访问器：不能和write set:function&#123; （ ） &#125;;。会在属性被赋值的时候自动调用get:function&#123; （ ） &#125;:会在属性被获取值的时候自动调用&#125;) ###双向绑定原理：元素变化，数据变化，数据变化，元素也变化 ie8一下为什么不支持双向绑定？ 因为ie8一下没有object.defineProperty这个方法，vue的原理就是这个 Vue.set动态添加的数据是可以实现绑定的； Vue.get(vm) 123456789101112Object.defineProperty(obj, &quot;name&quot;, &#123;set: function(value)&#123;this._name = value;// 这个方法一被调用，就证明属性发生变化了// 属性一变， html元素就要变// 在这里写代码更新html元素就可以达到双向绑定的效果了document.querySelector(&quot;#txt&quot;).value = this._name;&#125;,get: function()&#123;return this._name;&#125;&#125;) v-bind 指令 当需要给HTML标签中的属性绑定数据的时候，我吗不能用插值语句，需要用bind 《img v-bind:src=” “》 语法：v-bind：属性名=“要绑定的数据” 简写 ： ：属性名=“要绑定的数据” v-bind还可以绑定对象，在对象中属性值是给对象添加的类名，值是Boolean值 代表是否使用 v-bind还可以绑定数组，在数组中可以写入类名，绑定是数组里得分数据都生效，也可以和对象联合使用，改变Boolean值 也可以把定义好的对象和数组直接写到bind里面，直接修改Boolean值 v-bind绑定行内样式：-1：可以直接写入绑定的数据名字-2：可以绑定对象 传入多个属性 #####vue中的注册事件：v-on:事件名称=”函数名“ 简写 @事件名称=”函数名“ 函数名：在vue里创建 methods 里面写函数名及方法 如何从methods中拿到data中的数据: 通过原型中找就🆗了 vm.属性 假如拿到的是数字，需要转换为number类型的数据 1:当注册事件的时候，绑定的内容可以是函数名，也可以是函数名加上小括号，类似于调用，但是不是调用，可以用来传参 如果是函数名加小括号，那么在事件触发的时候，可以传参 当还需要事件对象的 时候，参数后面继续传参，vue规定好的是$event; 2:只是函数名的时候，不能传参，但是在vue定义的函数中获取到事件对象 e; vue中dom更新是异步的，数据改变时候并不代表页面中的内容就更新了，vue是延迟之后执行的，为了防止页面的重绘，vue会等到一个程序，改了很多东西时，在执行，这样会减少页面的重绘和性能，所有dom更新会有延迟 1234567vue提供了一个方法，确保dom跟新完成执行的方法this.$nextTick 异步更新队列 this.$nextTick(function()&#123;这个里面执行dom更新执行的操作，因为vue是异步的&#125;) #####b 事件修饰符：可以给事件加上一些特定的功能：用法 v-on：事件名称.事件修饰符=”事件函数“12345stop：如果给事件加上了stop会阻止冒泡；prevent: 阻止事件的默认行为，例如a连接的默认行为跳转once：事件只触发一次self：事件只能自己触发capture:事件会在捕获阶段被触发 如果即向不冒泡和跳转 点下去就行 -v-on:click.stop.precent=”事件函数” vue中的列表渲染：v-for=”item in ‘数组名’“ item用插值表达式表示 因为是遍历，所以插值表达式还可以写index； 直接可以写键值对，循环的次数； 遍历指定的数字， 1到100； v-for通常需要配合key的使用：当想往数组里添加某一项的时候，效率低下，会替换掉原本插入数组的值，并且下面的都会改变所以有了key 绑定死，增加效率。key需要一个唯一值，一般情况下，我们都给他绑定index； ###总结： 1：用v-model在复选框上得到时候，可以用空数组表示，当在浏览器选中的时候，数组的长度就会发生变化 2：用v-moel绑定下拉框的时候，绑定selec标签，绑定的是默认数字0，表示默认选中的是第一个元素 绑定属性的时候，v-bind：属性=”数据“ 1234&lt;img :src=&quot;url&quot; alt=&quot;&quot; /&gt; 这是简写&lt;img v-bind:src=&quot;url&quot; alt=&quot;&quot; /&gt; 这是完整的写发获取某张图片； 3：给盒子设置类的属性的时候，可以是一个数组，可以是一个对象，对象的话是键值对形式存在的，值是Boolean值，表示用不用。也可以是一个数组里得分值，只设置一个 4：vue更新数据是异步的，在改变原来的数据时候页面发生了变化，但是没有改，这个时候需要一个方法监听改完了的事件this.$nextTick写在点击事件或者其他事件的后面里面； 5：v-on事件可以简写@时间名=”事件函数名“不代括号的 可以在methods的事件中拿到事件event – 假如带括号的话，在methods里面拿不到，但是可以在v-on的函数名里面传参数，$event 然后在methods的事件里接收一下就🆗；","categories":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/categories/Vue/"}],"tags":[]},{"title":"FW切图工具","slug":"FW切图工具","date":"2018-04-22T14:48:34.000Z","updated":"2018-04-22T14:51:24.609Z","comments":true,"path":"2018/04/22/FW切图工具/","link":"","permalink":"http://yoursite.com/2018/04/22/FW切图工具/","excerpt":"","text":"FW简易切图：- 打开文件 ctrl+o 或者直接拖拽进去 - 选择切片工具 K - 把需要的区域量出来 - 通过缩放工具（z）去看看有没有量的很准确 - 通过Q工具（选择里面是缩放）去缩放切片 - 按住空格键不放 鼠标进行拖拽可以移动画布 - 缩小：ctrl + - - 滴管工具：i #####1、ps软件 - 处理位图的一个软件 - 学习的目的： * 1、简单使用ps * 2、重点在于切图 * 3、简单修改设计图 * 4、便于团队沟通 ##### 图层：图层本质上就可以看做是一张一张相同大小透明的纸，一个完整图像本质上是由一个又一个的图层堆叠而成 有了图层可以方便我们去修改，而如果单单只有一张图片处理起来是比较麻烦的 ##### ps的源文件名：psd 保留图层 利于后期修改 图片的文件名：jpg png gif 等 没有图层，不利于修改 #####切片工具：C 量尺寸 量完之后双击切片即可得到宽度和高度，一旦当切片多的情况下，需要选择某一个切片就需要运用到切片选择工具（也是c，但是要切换） - 放大：快捷键 Z 在属性菜单栏下将细微缩放干掉 - 缩小：ctrl + - #####移动工具：V 移动工具 常用 选择图层：v工具状态下，在属性菜单栏下将自动选择勾选去掉 将组改成图层之后，选择对应的图片只需要按住ctrl不放，在图像上单击即可找到对应的图层 吸管：i 吸取的结果会在前景色里面找到。点击前景色即可获取颜色 切片工具：C （选择c工具组里面的某一个 shift+c） #####切图： 选择切片工具将需要切的区域框选出来 调整大小（一定是在c工具状态下） 三键（ctrl+alt+shift）+s（导出web使用格式）一定要选择（选中的切片） 注意：ps会在你选择的目录下找images文件夹，如果没有ps会自己新建一个 删除切片：在c状态下，直接在切片有右键即可删除切片 选择切片：在c状态下，按住ctrl不放 直接点击切片即可选中 #####如何切一张透明的图片： 1、先选中这个图片的图层 （按住ctrl不放 然后点击该图像即可跳到这个图像对应的图层） 2、在改图层上右键转换成智能对象 3、在图层中心范围内双击 点击确定 4、三键+s保存 （这个保存需要将图片文件放到对应的文件夹里面去） 其他了解： 修改单位：ctrl+k 打开首选项 ==&gt; 单位与标尺 ==&gt; 单位面板修改即可 拉辅助线：前提：必须有标尺（ctrl+r）直接从标尺处开始拖拽 新建文件：ctrl+n 分辨率 72 选区工具：m 填充前景色：alt+退格键 填充背景色：ctrl+退格键 缩放的快捷键：ctrl+t 合并图层：ctrl+e 撤销操作：ctrl+alt+z","categories":[{"name":"css","slug":"css","permalink":"http://yoursite.com/categories/css/"}],"tags":[]},{"title":"数组即字符串的常用方法","slug":"数组即字符串的常用方法","date":"2018-04-22T14:41:24.000Z","updated":"2018-04-22T14:45:19.366Z","comments":true,"path":"2018/04/22/数组即字符串的常用方法/","link":"","permalink":"http://yoursite.com/2018/04/22/数组即字符串的常用方法/","excerpt":"","text":"##数组的方法 1：数组的翻转123var arr = [9,8,4,12,45,72,100,120];var newArr = arr.reverse();返回的是反 转后的数组，原来的数组也被翻转了 2：排序1234var sortedArr = arr.sort(function (a, b) &#123;// return a- b; //升序排列return b - a; //降序排列&#125;); 3：数组的拼接123456var arr1 = [1, 2, 3, 4, 5];var arr2 = [&quot;hello&quot;, &quot;hi&quot;, &quot;hehe&quot;];var arr3 = [&quot;嘿嘿&quot;, &quot;哈哈&quot;, &quot;嘻嘻&quot;];var newArr = arr1.concat(arr2,arr3);参数：需要一个或多个数组返回值：拼接后的数组，不改变原数组 4：数组的截取 slice： *不给参数：复制数组 —————————-不改变原有的数组 * 一个参数：下标到最后，包含开始 * 二个参数： 数字都是下标，但是不包括最后的 即 [ ); splice: *不给参数：截取数组—————————–截取数组，改变原数组 * 一个参数：从开始的下标开始截取，一直到最后 *两个参数：从参数一下标截取，截取参数二的个数 *多个参数：参数三以后是在截取的位置添加元素 #####5：数组的查找 indexOf : 查找第一次出现的位置返回值：返回元素的位置 ，找不到返回-1 参数：需要查找的元素 lastIndexOf:查找最后一个：同上 ####数组转化字符串 1 join : 是将数组转换成为字符串，并且使用分隔符链接参数：不给以逗号隔开，传的话参数代表分隔符 返回值：转换成字符串的结果 12345678910练习：数组去重原理：循环数组进行查找元素，没有的话push到新数组var arr = [&quot;c&quot;, &quot;a&quot;, &quot;z&quot;, &quot;a&quot;, &quot;x&quot;, &quot;a&quot;, &quot;a&quot;, &quot;z&quot;, &quot;c&quot;, &quot;x&quot;, &quot;a&quot;, &quot;x&quot;];var newArr=[ ];for( var i = 0; i&lt;arr.length; i++)&#123; if(arr.indexOf(arr[ i ])==-1)&#123; newArr.push( arr[ i ]);&#125;&#125; 字符串去空格：trim（）； 返回的是去掉两边空格的字符串 字符串的复制 substr: 从原有的字符串上复制一段 一个参数：从下标开始复制到最后 两个参数：从参数一的下标开始，复制参数二的个数 返回值： 复制后的字符串 字符串的切割：(把字符串转换成为数组)123 split：var str5 = &apos;hello-hi,你好&apos;;var result = str5.split(&quot;-&quot;);","categories":[{"name":"js","slug":"js","permalink":"http://yoursite.com/categories/js/"}],"tags":[]},{"title":"git命令","slug":"git命令","date":"2018-04-21T15:24:54.000Z","updated":"2018-04-22T14:22:00.484Z","comments":true,"path":"2018/04/21/git命令/","link":"","permalink":"http://yoursite.com/2018/04/21/git命令/","excerpt":"","text":"git 重置 reset –hard 版本号 重置了这个版本，在所有区域都重置了 将来不小心误操作了，提交了，可以回退某个版本 reset –soft 版本号 只重置了仓库区 reset –mixed 版本号 重置，只剩下工作区 把暂存区和仓库区都重置了 1234567 git 忽视文件（有的文件不希望git管理提交）* 在文件目录中创建一个 .gitignore * 把不想提交的文件名写在这个文件里即可* 把自己也写进去 git 分支操作 git branch 查看分支，master是默认的主分支 分支其实本质上就是一个指针 当新提交了一个版本，当前的指针会指向最新生成的版本 当前颜色是绿色，有小菊花 #####创建分支 git branch login 新建一个登陆的分支 git branch 可以查看所有分支 git 中有一个HEAD指针永远指向当前分支 #####切换分支 git checkout login 切换分支为登陆的分支 在这之后，master分支都没有登陆功能，给客户看的时候就不会有bug 当登陆功能写完时，切换master分支 git checkout master 并且希望login的内容合并master分支上 git merge login 这样就何在一起了 #####删除分支 git branch -d login (前提login要切换到其他分支，并合并才能删除) ###创建分支的步骤： 1：在写另一个功能不想被别人看到的时候先创建分支 git branch login 2:要把新建的分支指向这个功能 git chekout login 然后这个时候就可以开始写代码了,然后写的代码包括一开始写的代码（master阶段），如果切换到master分支时，不会显示login分支的内容 3：最后写完了 把分支指向主分支 git checkout master 4:最后要主分支master合并login即可 git merge login 这个时候login的内容和master一开始的内容就合并了 5：这个时候分支就可以删除了 git branch -d login; git checkout -b 分支名 创建并且切换 多个分支合并的冲突问题 git ：当先合并一个的时候，原理是指针会带着master指向那个分支，是祖辈分支可以快速合并，但是在继续合并其他分支的时候，由于分支带着master跑到了其他分支，再合并就不是祖辈关系了，导致合并冲突，不能快速合并 解决方案：删除冲突产生的符号标记，并删除，然后重新add commit 就行了 git对比 查看工作区与暂存区的不同 git diff 查看暂存区与仓库区的不同 git diff –cached 查看工作区与仓库区的不同，HEAD表示最新的那次提交 git diff HEAD 查看两个版本之间的不同 git diff c265262 de4845b ###github常见项目 克隆远程仓库 git clone 仓库地址 文件夹名称 提交到远程仓库 git push +地址 分支名（master） 提交过一次 再次提交可以把地址改为origin就行 （origin是克隆的时候保存下来的） git pull 获取远程仓库可以直接偷过来用 git remote 查看地址的快捷名 git remote add bi别名 给地址增加其他的名字 SSH非对称加密 私钥 个人 公钥 GitHub","categories":[{"name":"git专题","slug":"git专题","permalink":"http://yoursite.com/categories/git专题/"}],"tags":[]},{"title":"前端模块化","slug":"前端模块化","date":"2018-04-21T15:07:24.000Z","updated":"2018-04-22T14:38:24.819Z","comments":true,"path":"2018/04/21/前端模块化/","link":"","permalink":"http://yoursite.com/2018/04/21/前端模块化/","excerpt":"","text":"前端模块化 1 前提在使用模块化之前，在当前页面引入插件require.js 1: 定义模块：语法define（“模块名”，[依赖项]，function（）{ 模块的全部代码cosole(我是A模块哈哈)}） 模块名一般建议不写，叫做匿名模块 还要起名字的叫做（具名模块）； 2:引入模块：语法 require（[模块名，写明路径]），function（）{模块引入完成时调用 执行这里面 的代码（异步）console。log（我是A模块哈哈）}） 模块名不要.js后缀 定义，并且引入过后，主要执行的结果是我是A模块哈哈我是A模块哈哈 但是 由于定于的模块是一个闭包，调用完成后就被销毁了，所以要有一种方法暴露出去 导出 即可。 require（[模块名，写明路径]），function（）{ 模块引入完成时调用 执行 这里面的代码（异步）var age=100; function song(){ alert(6666); return{age:age,song:song }; //这样这个定义的模块就有了导出项，别人可以使用了，但是问题来了，别人怎么使用呢！！！ }） 有导出项的模块怎么使用，即使用返回时，怎么拿到！！！ 在引入模块的回掉函数写一个形参 require（[模块名，写明路径]），function（mk）{ mk.song(); mk.age;}） mk就是一个形参，接收引进了模块暴露的数据，是一个对象 这样模块引进的同时，数据也可以调用 结果就是 6666 100 4：引入多个模块，多个模块都有返回值，怎么解决！！ require（[a,b,c]，function(a.b.c){ }）一般形参和数组中的模块是一一对应的，注意对应和顺序，有几个导出项，就要写几 个形参 一般没有形参的可以用下划线表示 优化，不用返回值的模块因日可以写在后面，这样这个模块的形参在最后就可以不写了!!! 5 依赖项define（“模块名”，[c]，function（mc）{mc.xxxxxxx(就可以用了) }） 假如定义的是b模块 。C是依赖项，想用c的导出项，也是给一个形参 6 模块的路径 一般像jQuery主流的插件 都是有导出项的 支持模块化的 路径很深的情况下不好找，于是有了方法require.config({基础路径：一般是网站的 决定路径；baseUrl:’’paths:{ chajian:’’ chajian2:’’} }) paths:{chajian:’’} 这一部分是的paths是配置的插件的路径 chajian 这是自定义取的别名，防止真正的插件名字太长，可以替换的 后面的是 基础路径设置完成下面的相对路径 然后在导入插件的时候就可以用别名了require（[chajian,chajian2]，function(){ }） 假如有的插件不支持模块化，但是有要依赖项比如 bootstrap 和wangedtor 他俩不 支持但是有依赖与jQuery给不支持模块化的第三方插件使用 require.config({基础路径：一般是网站的决定路径；baseUrl:’’paths:{ chajian:&apos;&apos; chajian2:&apos;&apos;bootstrap:&apos;&apos;wangeidtor} }) shim{ } ##一个项目的总代码1234567891011121314151617181920212223242526 1配置路径require.config(&#123; 2公共的基础路径baseUrl:&apos;/baixiu/04-baixiu/assets/vendors/&apos;, 3 配置模块的 路径和别名paths:&#123;jquery:&apos;jquery/jquery&apos;,template:&apos;template/template-web&apos;,wangEditor:&apos;wangEidtor/wangEditor&apos;,moment:&apos;moment/moment&apos;,posts:&apos;posts&apos;, 本身不支持模块化，但是有又依赖于jquerypagination:&apos;pagination/jquery.pagination&apos;,bootstrap:&apos;bootstrap/js/bootstrap&apos;&#125;, 给不支持模块化的第三方插件 指定依赖项shim:&#123; 给两个模块绑定依赖关系pagination:&#123;deps:[&apos;jquery&apos;] //依赖项一定是数组格式&#125;,bootstrap:&#123;deps:[&apos;jquery&apos;] //依赖项一定是数组格式&#125;&#125;&#125;); 12345678910- 引入模块require([&apos;posts&apos;],function()&#123;&#125;);只需引入posts 前提posts中要导入其他的插件+ define([&apos;template&apos;,&apos;moment&apos;,&apos;wangEditor&apos;,&apos;pagination&apos;,&apos;bootstrap&apos;],+ function(template,moment,wangEditor,pagination,bootstrap)&#123;+ 把$(function ) 换成define就行啦!!!!!","categories":[{"name":"node.js","slug":"node-js","permalink":"http://yoursite.com/categories/node-js/"}],"tags":[]},{"title":"node.js","slug":"node.js","date":"2018-04-21T14:47:43.000Z","updated":"2018-04-22T08:25:23.330Z","comments":true,"path":"2018/04/21/node.js/","link":"","permalink":"http://yoursite.com/2018/04/21/node.js/","excerpt":"","text":"##node.js process.stdout.write(“”) 标准输出 写文件 1fs.writeFile(&quot;文件路径&quot;，“文件的内容”，“文件编码格式”，回掉函数) 函数参数err 如果成功了，err是null 如果失败了，err是失败的信息 想用这个方法先要引入1var fs =require(&quot;fs&quot;); 只有global全局的内置方法才能直接使用，否则需要使用require定义才能使用 读文件 123fs.readFile(&quot;路径&quot;，“编码格式”，function（err,data）&#123; &#125;) 如果不传编码格式，读取的数据是一个buffer 对象，可以调用toString方法传递编码格式作为参数来转换 创建文件夹 123fs.mkdir(&quot;文件夹名&quot;，function（）&#123; &#125;) 同步创建文件 123fs.writeSync( &quot;文件名&quot;，“内容”)；console.log(66666) 由于是同步，不需要回调函数 结果是先创建文件才能读取666","categories":[],"tags":[]},{"title":"hexo命令","slug":"hello-world","date":"2018-04-19T14:41:18.870Z","updated":"2018-04-22T14:37:39.774Z","comments":true,"path":"2018/04/19/hello-world/","link":"","permalink":"http://yoursite.com/2018/04/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[]},{"title":"my new post","slug":"hexo创建博客日志","date":"2018-04-19T14:11:21.000Z","updated":"2018-04-22T14:37:55.804Z","comments":true,"path":"2018/04/19/hexo创建博客日志/","link":"","permalink":"http://yoursite.com/2018/04/19/hexo创建博客日志/","excerpt":"","text":"hexo创建博客安装步骤 npm安装的时候，默认会访问npmjs.org这个网站，国外的，把镜像地址改成了淘宝的。 修改npm镜像地址 12npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global 安装hexo 123npm install -g hexo-clihexo -v # 查看hexo的版本信息 初始化博客 12# 新建一个目录 bloghexo init # 初始化 生成静态页面 12hexo generate # 生成静态页面 hexo g # 生成静态页面（简写） 启动服务 12hexo server # 启动服务hexo s # 启动服务(简写) 访问站点 1http://localhost:4000/ # 通过这个地址就可以访问了 hexo常见命令 hexo n &#39;博客标题&#39;创建一篇新的博客 hexo g 生成博客 hexo d 发布博客 hexo中文文档 hexo next主题文档 博客格式123456789101112---title: 我的第一篇博客//(注意冒号后面有一个空格不能丢。)date: 2018-04-02 01:12:29 //指定博客的日期tags: - 学习 - 随笔 - 心情categories: - javascript---# 我是大标题这后面的内容就跟普通的markdown文件没什么区别 发布配置安装hexo的部署工具npm install hexo-deployer-git --save 修改_config.yml文件 12345678910111213# Sitetitle: 网站标题subtitle: 子标题description: 无author: 作者名称language: zh-CNtimezone:# 发布配置deploy: type: git repo: github仓库地址 branch: master 使用hexo d发布博客","categories":[{"name":"git专题","slug":"git专题","permalink":"http://yoursite.com/categories/git专题/"}],"tags":[]}]}